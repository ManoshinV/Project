#include <iostream>
#include <fstream>
using namespace std;

const long double G = 6.6740831 * pow(10, -11);
const long double M_Star = 1.7565459 * pow(10, 28);
const long double PI = acos(-1);
long long t = 0;

ofstream f("C:\\it3\\rkt.txt");

struct Planet {
	long double abs_v{}; //модуль скорости
	long double v_Corner{}; //направление скорости
	long double corner{}; //полярный угол между объуктом и солнцем
	long double R; //расстояние до солнца


	long double	Eq_radius{}; //экв радиус
	long double Weight{}; //масса
	long double The_period_of_rotation{}; //период обращения
	long double The_sphere_of_gravity{}; //сфера тяготения
};

Planet Kerbin{ 9285,-0.37 * 2 * PI + PI / 2 + 2 * PI ,-0.37 * 2 * PI + 2 * PI,13599840256 ,  600000,5.2915793 * pow(10, 22), 9203545 ,84159286 };
Planet Duna{ 7146, PI / 2, 0, 21783189163 , 320000, 4.5154812 * pow(10, 21), 17315400, 47921949 };
void Mv_Planet(Planet P) {
	long double _t = 1;
	long double vx = P.abs_v * cos(P.v_Corner - P.corner);
	long double vy = P.abs_v * sin(P.v_Corner - P.corner);
	long double a = (G * M_Star) / (P.R * P.R);
	long double sx = vx * _t - (a * _t * _t) / 2;
	long double sy = vy * _t;
	long double fi = atan2(sy, sx);
	bool f1;
	if (fi <= PI && fi >= 0) {
		f1 = true;
		fi = PI - fi;
	}
	else {
		f1 = false;
		fi = abs(fi);
		fi = PI - fi;
	}
	long double s = sqrt(sx * sx + sy * sy);
	long double rn = sqrt(P.R * P.R + s * s - 2 * P.R * s * cos(fi));
	long double fi2 = asin((sin(fi) * s) / rn);
	vx = vx - a * _t;
	long double new_corner = atan2(vy, vx);
	long double new_abs_v = sqrt(vx * vx + vy * vy);
	P.abs_v = new_abs_v;
	P.v_Corner = new_corner + P.corner;
	P.R = rn;
	if (f1) {
		P.corner += fi2;
	}
	else {
		P.corner -= fi2;
	}
	if (P.corner > 2 * PI) {
		P.corner -= 2 * PI;
	}

	if (P.v_Corner > 2 * PI) {
		P.v_Corner -= 2 * PI;
	}

	Duna.abs_v = P.abs_v;
	Duna.corner = P.corner;
	Duna.v_Corner = P.v_Corner;
	Duna.R = P.R;
}

int Pow(long double a) {
	int n = 0;
	while (a >= 10) {
		a /= 10;
		++n;
	}
	return n;
}

long double Pow2(long double a) {
	while (a >= 10) {
		a /= 10;
	}
	return a;
}

int main() {
	long double fi = Duna.corner;
	while (1) {
		++t;
		if (t > 10000000 && fi < Duna.corner + PI / 10000) {
			break;
		}
		Mv_Planet(Duna);
		if (t % 200000 == 0)
			f << (long long)Duna.R/1000 << '\n';
	}
	t = 0;
	fi = Duna.corner;
	while (1) {
		++t;
		if (t > 10000000 && fi < Duna.corner + PI / 10000) {
			break;
		}
		Mv_Planet(Duna);
		if (t % 200000 == 0)
			f << (long long)Duna.R / 1000 << '\n';
	}
	t = 0;
	fi = Duna.corner;
	while (1) {
		++t;
		if (t > 10000000 && fi < Duna.corner + PI / 10000) {
			break;
		}
		Mv_Planet(Duna);
		if (t % 200000 == 0)
			f << (long long)Duna.R / 1000 << '\n';
	}
	return 0;
}
